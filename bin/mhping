#!/usr/bin/env perl

use 5.008008;
use utf8;
use warnings FATAL => 'all';
use threads;
use threads::shared;
use Thread::Queue;
use Getopt::Long;
use Time::HiRes qw(time);

$|++;

my $VERSION = 0.002;

my %option;
Getopt::Long::Configure('bundling');
GetOptions(
    'f|filename=s' => \$option{filename},
    'v|version'    => sub { show_version(); exit 0; },
    'h|help'       => sub { show_help(); exit 3; },
) or do { show_help(); exit 3; };

my @hosts = parse_hosts( $option{filename} );

my @workers;
foreach my $host (@hosts) {
    my $queue = Thread::Queue->new;
    my $worker = threads->create( 'ping_host', $queue, $host );
    push( @workers, { thread => $worker, queue => $queue, host => $host } );
}
threads->create( 'show_report', \@workers )->join;

exit 0;

sub show_help {
    print <<HELP;
Usage: mhping [options] [systems...]
    -f,--filename   read list of targets from a file
    -v,--version    show version
HELP

    return;
}

sub show_version {
    print <<VERSION;
mhping : Version $VERSION
VERSION

    return;
}

sub parse_hosts {
    my $hosts_file = shift;

    return @ARGV if scalar @ARGV;

    my $hosts_fh;
    if ( not defined $hosts_file ) {
        print "Write one host per line and end with CTRL-D.\n";
        $hosts_fh = 'STDIN';
    }
    elsif ( $hosts_file eq '-' ) {
        $hosts_fh = 'STDIN';
    }
    else {
        open( my $hosts_fh, '<', $hosts_file )
          or die "Can't open file hosts file '$hosts_file'!\n";
    }
    my @hosts;
    while (<$hosts_fh>) {
        chomp;
        push( @hosts, $_ );
    }

    return @hosts;
}

sub show_report {
    my $workers = shift;

    my $tty_clear = qx( clear );

    while (1) {
        print $tty_clear;
        printf "%2s %-30s %10s \n", '#', 'Host', 'RTT';
        print '-' x 46, "\n";

        my $worker_count;
        foreach my $worker ( @{$workers} ) {
            my $message;
            if ( $worker->{thread}->is_running ) {
                $message = $worker->{queue}->dequeue;
                next unless $message;
                $worker_count++;
                printf "%2d %-30s %10s \n",
                  $worker_count, $worker->{host}, $message;
            }
        }

        sleep 1;
    }

    return;
}

sub ping_host {
    my $job_queue = shift;
    my $host      = shift;

    open( my $ping, '-|', "ping $host 2>&1" );
    while (<$ping>) {
        my $message;
        if (m/time=(.+)$/) {
            $message = $1;
        }
        else {
            $message = '?';
        }
        $job_queue->enqueue($message);
    }

    return;
}

# vim: set ts=4 sw=4 et:
